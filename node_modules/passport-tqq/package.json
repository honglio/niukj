{
  "name": "passport-tqq",
  "version": "0.0.2",
  "description": "Tencent QQ authentication strategy for Passport.",
  "keywords": [
    "passport",
    "qq",
    "tencent",
    "auth",
    "oauth2",
    "oauth",
    "authentication"
  ],
  "author": {
    "name": "Heroic Yang",
    "email": "me@heroicyang.com",
    "url": "http://heroicyang.com/"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:heroicyang/passport-tqq.git"
  },
  "bugs": {
    "url": "https://github.com/heroicyang/passport-tqq/issues"
  },
  "main": "./lib/passport-tqq",
  "dependencies": {
    "passport-oauth": "~0.1.x"
  },
  "engines": {
    "node": ">=0.6",
    "npm": ">=1.0"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "readme": "# Passport-TQQ\n\n适用于[Passport](http://passportjs.org/)的[Tencent QQ](http://www.qq.com/)登录认证策略。\n\n## Install\n\n    $ npm install passport-tqq\n\n## Usage\n\n#### Configure Strategy\n```\n  passport.use(new TqqStrategy({\n      clientID: QQ_APP_ID,\n      clientSecret: QQ_APP_KEY,\n      callbackURL: \"http://localhost:3000/auth/qq/callback\"\n    },\n    function(accessToken, refreshToken, profile, done) {\n      User.findOrCreate({ qqId: profile.id }, function (err, user) {\n        return done(err, user);\n      });\n    }\n  ));\n```\n#### Authenticate Requests\n```\n  // QQ登录认证时 `state` 为必填参数\n  // 系client端的状态值，用于第三方应用防止CSRF攻击，成功授权后回调时会原样带回\n  app.get('/auth/qq', function (req, res, next) {\n    req.session = req.session || {};\n    req.session.authState = crypto.createHash('sha1')\n                              .update(-(new Date()) + '')\n                              .digest('hex');\n    passport\n      .authenticate('qq', { \n        state: req.session.authState \n      })(req, res, next);\n  });\n\n  app.get('/auth/qq/callback', function (req, res, next) {\n    // 通过比较认证返回的`state`状态值与服务器端`session`中的`state`状态值\n    // 决定是否继续本次授权\n    if(req.session && req.session.authState \n          && req.session.authState === req.query.state) {\n      passport\n        .authenticate('qq', { \n          failureRedirect: '/login' \n        })(req, res, next);\n    } else {\n      return next(new Error('Auth State Mismatch'));\n    }\n  },\n  function(req, res) {\n    res.redirect('/');\n  });\n```\n#### Extended Permissions\n\n可以配置用户授权时向用户显示的可进行授权的列表。\n\n```\n  app.get('/auth/qq',\n      passport.authenticate('qq', {\n        state: 'random state value',\n        scope: ['get_user_info', 'list_album'] \n      }));\n```\n\n## Examples\n\n见 [https://github.com/heroicyang/passport-tqq/tree/master/example](https://github.com/heroicyang/passport-tqq/tree/master/example)\n\n## Credits\n\n  - [Heroic Yang](http://github.com/heroicyang)\n\n## License\n\n[The MIT License](http://opensource.org/licenses/MIT)\n\nCopyright (c) 2011-2013 Heroic Yang <[http://heroicyang.com/](http://heroicyang.com/)>",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/heroicyang/passport-tqq",
  "_id": "passport-tqq@0.0.2",
  "_from": "passport-tqq@>=0.0.2"
}
